/**
 * ⚡️ Welcome to *Neon*! ⚡️
 * 
 * Ready to light up the digital horizon with your code? Neon brings simplicity, 
 * speed, and style to the future of programming. Let's get glowing with a quick 
 * tour of what makes Neon shine. 🔮
 *
 * First up, let's flash that classic *"Hello, World!"* with Neon's signature brilliance:
 */

print("💡 Neon Awakens")  // ⚡ Plug in and power up!

/// Now, let's declare a function—Neon-style. It's as easy as flipping a switch. ⚙️

fn ignite() {
  "⚡ Neon is alive"  // No `return` needed—just pure energy.
}

/**
 * Boom! The function `ignite` just returns a string without any extra fluff. 
 * Now, let's store that spark in a variable. 💾
 */

let signal = ignite()  // ⚡ The neon signal is locked in.

/// Control flow? Of course. Neon handles `if` expressions with futuristic ease:

let response = if signal == "⚡ Neon is alive" {
  "💬 Status: ONLINE"  // 🌐 All systems go.
} else {
  print("🚨 Malfunction detected!")  // Something's off in the grid.
}

/**
 * 💡 Remember, `if` in Neon always returns a value, so you can directly use it 
 * in expressions, loops, wherever you need! 
 */

let final_signal = ignite() + " | " + response  // Combine the power signals for max output. 🚀

/**
 * Let's hit the next gear—looping through arrays. 
 * Imagine these are energy pulses in the grid. 💥
 */

for pulse in ["🔋1", "🔋2", "🔋3"] {
  print("Pulse level:", pulse)  // Pulse level 1, 2, 3, flowing through the system.
}

/**
 * Neon supports objects too! Let's create a futuristic avatar to keep track of our system:
 */

let cyber_entity = {
  name: "Cybernaut X",
  age: 2049,  // 🚀 Future-born.
  location: "Neo Tokyo, Sector 7",
  upgrades: ["🦾 Bionic Arm", "🧠 Neural Link"],
  status: fn check_status() {
    "💡 " + cyber_entity.name + " is fully operational."
  }
}

/// Accessing the avatar's properties? It's as smooth as slicing through the digital ether:

print("Entity's status:", cyber_entity.status())  // 💡 Cybernaut X is fully operational.

/**
 * And of course, since Neon scripts are full expressions, 
 * we can make our avatar's status the final output of the script. ⚡
 */

cyber_entity.status()  // The final evaluation—the system's ready to go live. 🔥

/**
 * 🛠 What's the output? 
 * **"💡 Cybernaut X is fully operational."** — Naturally. 🚀
 *
 * This glowing symphony of code is built with Rust at its core, but you're 
 * seeing it run effortlessly in WebAssembly, right here in your browser. 🔌 
 * It's all custom-built—the lexer, parser, interpreter, and semantic analyzer 
 * combine to give you the smoothest experience.
 *
 * Dive deeper into Neon's wonders—explore the examples, remix the code, and 
 * let your imagination light up the future. 🪐
 * 
 * Thanks for charging up with Neon. We're just getting started! ⚡
 */
