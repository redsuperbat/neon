/**
 *  Welcome to Neon! ðŸ‘‹ Let's take a quick dive into the language.
 *
 *  Below is a simple "Hello, World!" example:
 */

fn hello() {
  "Hello"
}

/**
 *  As you can see, there's no need for a `return` keywordâ€”the function automatically 
 *  returns the string "Hello" since the body is an expression. âœ…
 *
 *  To declare variables, use the `let` keyword:
 */

let greeting = hello()

/**
 *  For control flow, use the `if` and `else` keywords:
 */

let message = if greeting == "Hello" {
  " world!"
} else {
  print("Woopsie ðŸ˜±")
}

/**
 *  In Neon, `if` statements are also expressions, returning the value of the evaluated branch. 
 */

let greeting = hello() + message

/**
 * Neon has for loops, arrays and objects. To loop over an array you can use the `for` and `in` keywords
 * The below loop will print `1, 2, 3` to the console.
 */

for el in [1, 2, 3] {
  print(el)
}

/**
 * To declare an object use the curly bracket syntax
 */

let david = {
  age: 12,
  street: "Stockholm west av. 24",
  siblings: ["Anne", "Max"],
  greeting: fn greet() {
    print(greeting)
    greeting
  }
}

/**
 * To access properties use the dot notation
 */

print("Davids age", david.age)


/**
 * Neon scripts are also expressions, evaluating to a value.
 * Therefore if we add the `greeting` variable as the last
 * expression in this file the script will evaluate to the value
 * contained in the `greeting` variable
 */

david.greeting

/**
 * When you run this script, you should see "Hello world!" as the output. 
 *
 * Neon is written in Rust, and the version you're using now is compiled to 
 * WebAssembly to run in the browser. All error messages and syntax highlighting 
 * are custom-built with Neon's own parser, lexer, interpreter, and semantic analyzer. ðŸ§ 
 *
 * If you want to explore more, check out the examples! 
 * Thanks for trying out Neon, it's been a blast to create it. ðŸŽ‰
 */
